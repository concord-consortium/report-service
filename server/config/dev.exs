import Config

# Configure your database
config :report_server, ReportServer.Repo,
  username: "root",
  password: "xyzzy",
  hostname: "localhost",
  port: 3406, # using mysql container in docker-compose.yml
  database: "report_server_dev",
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :report_server, ReportServerWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {0, 0, 0, 0}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "cOXxrcfs9bBErR6iA/KjxOJ6iJ6FiuTm7j3Jpr1Zso3r2WKjvpxw6b7TrtJEpFM+",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:report_server, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:report_server, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :report_server, ReportServerWeb.Endpoint,
  live_reload: [
    web_console_logger: true,
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/report_server_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Disable the report tree cache in dev mode so the report.run function is not cached
config :report_server, disable_report_tree_cache: true

# Enable dev routes for dashboard and mailbox
config :report_server, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

config :report_server, :portal,
  client_id: "research-report-server",
  url: "https://learn.portal.staging.concord.org"

config :report_server, :token_service,
  # switch the url to localhost if using the Firebase emulator locally
  # url: "http://localhost:5000/api/v1/resources"
  url: "https://token-service-staging.firebaseapp.com/api/v1/resources", # staging
  private_bucket: "token-service-files-private" # staging

config :report_server, :report_service,
  url: "https://us-central1-report-service-dev.cloudfunctions.net/api" # staging

config :report_server, :output,
  bucket: "report-server-output",
  jobs_folder: "jobs",
  transcripts_folder: "transcripts"

config :report_server, :athena,
  bucket: System.get_env("ATHENA_REPORT_BUCKET") || "concord-staging-report-data", # staging
  log_db_name: System.get_env("ATHENA_LOG_DB_NAME") || "log_ingester_production", # staging
  hide_username_hash_salt: System.get_env("HIDE_USERNAME_HASH_SALT") || "not-the-real-salt" # dev value
